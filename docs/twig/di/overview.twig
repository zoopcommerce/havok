<h1>Overview</h1>
<p class="lead">So, what is dependency injection...</p>

<p>Dependency Injection removes what can sometimes be the mess of configuring modules and the resources they need to consume from the normal flow of code. Instead of long constructor functions and complex constructor arguments, configuration is defined in a confie module, and the di container does all the wiring up for you. It removes hard dependencies from code, and configuration can be easily altered for different needs.</p>

<h2>Example</h2>
<p>When the <code>havok/exception/handler</code> renders an exception to the console, it uses <code>havok/exception/ConsoleLogRenderer</code>. If you write your own improved renderer, you can use it with this simple change to the config:</p>

<pre class="prettyprint linenums">
di: {
    'havok/exception/Handler': {
        gets: {
            consoleLogRenderer: 'my/new/Renderer'
        },
    }
}
</pre>

<h2>Creation</h2>

<p>There can be multiple di containers. A di container is created like this:

<pre class="prettyprint linenums">
require(['havok/di/Di'], function(Di){
    var di = new Di({/*my config*/});
}
</pre>

<h2>Config</h2>

<p>The behaviour of the di container is controlled by the config object.</p>

<p>The config object can be explicitly passed to the constructor:</p>

<pre class="prettyprint linenums">
var di = new Di({/*put configuration here*/});
</pre>

The config object can be set after the di container has been created:

<pre class="prettyprint linenums">
di.setConfig({/*put configuration here*/});
</pre>

<p>If no config object is supplied to the constructor, the <code>di</code> key from the dojo config object will be used.</p>

<p>The a config object can be merged with the existing di config using the mergeConfig method:</p>

<pre class="prettyprint linenums">
di.mergeConfig({/*put config to merge here*/});
</pre>

<p>The config for an individual identifier can be set with:</p>

<pre class="prettyprint linenums">
di.setIdentifierConfig(identifier, {/* put config here*/});
</pre>

<p>For docs of the config format, see below.</p>

<h2>sharedDi!</h2>

<p>Other Havok use one common di container configured with the dojo config object. This allows the di config to be merged by <code>havok/config/manager</code>.</p>

<p>To get the shared di container use the AMD plugin:</p>

<pre class="prettyprint linenums">
require(['havok/di/sharedDi!'], function(sharedDi){
    //do something
}
</pre>

<h2>Retrieving objects</h2>

<p>To fetch an object from the di you need to pass the di an identifier. The di will look the identifier up in the config, do any injections, and pass the result back to you. An object can be fetched from the di with three different methods:</p>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th style="width: 100px;">name</th>
            <th>description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>di.get(identifier)</td>
            <td>Simple and clear. It gets an object.</td>
        </tr>
        <tr>
            <td>di.create(identifier)</td>
            <td>Creates an object, ignoring any object already cached with the identifier.</td>
        </tr>
        <tr>
            <td>di.proxy(identifier)</td>
            <td>Gets a proxy, or a stand-in for the object. Good for lazy loading.</td>
        </tr>
    </tbody>
</table>

<p>The differences between these methods are explained more below.</p>
