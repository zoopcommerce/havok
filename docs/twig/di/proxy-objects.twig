<h1>Proxy Objects</h1>

<p>It's all great and wonderful to inject objects here and there, but what if you have an object that only might be used? You don't want to go through the overhead of creating, particularly if it requires extra code to be loaded from the server if it is only rarely used. It's time to use a Proxy.</p>

<p>A proxy object is a stand in for the real object. Di can create a proxy, and the real object will only be created when the proxy is first used. Proxy object will be injected with their own configured <code>params</code> and <code>proxies</code> when the proxy is created. However, they will not be injected with any configured <code>gets</code> until first method call on the proxy.</p>

<p>When creating a proxy, the di needs to be told what methods are available for proxying. This is what the <code>proxyMethods</code> configuration is used for.</p>

<p>For example, with this config <code>di.get('my/zoo')</code> will return an instance of <code>my/zoo</code> populated with a proxy lion. The <code>my/lion/module</code> will not be created until <code>zoo.lion.roar()</code> is called.</p>

<pre class="prettyprint linenums">
'my/zoo': {
    proxy: {
       lion: 'my/lion/module'
    }
}
'my/lion/module': {
    proxyMethods: [
        'roar'
    ]
}
</pre>

<p>Note: Proxied methods may return a Deferred which will resolve to the proxied method's result. This is because fetching the insance through the di may involve asyncronous loading.</p>

<p>Every proxy also has a <code>diGet()</code> function that can force the di to load the proxy's underlying instance.</p>
