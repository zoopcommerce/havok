<h1>Throttle</h1>

<p><code>havok/store/Throttle</code> is a store wrapper that will throttle activity on a store. It is useful when using a store such as <code>dojo/store/JsonRest</code> to control the volume of server requests.</p>

<p>Internally throttle has a queue of requests. Each time a <code>query</code>, <code>get</code>, <code>put</code>, <code>add</code>, or <code>remove</code> is made against the store, the request is added to the queue. Items in the queue are processed at a set interval. Items in the queue are given a ttl (time to live). If an item has gone stale before it is processed, then the request is dropped.</p>
<p>Throttle takes three arguments:</p>

<ul>
    <li><b>store</b> the store to be wrapped</li>
    <li><b>throttle</b> the minimum time in milliseconds between activity on the store. Defaults to 100.</li>
    <li><b>ttl</b> the time to live of each request.</li>
</ul>

<pre class="prettyprint linenums">
require(['havok/store/Throttle', 'dojo/store/JsonRest'], function(storeManager, JsonRest){
    var store = new Throttle(
        new JsonRest({target: 'http://myserver.com'}), //store to throttle
        300, //JsonRest store will not recieve requests faster than one every 300 milliseconds
        1000 //if any request is unprocessed for 1000 milliseconds, then it will be dropped
    );
}</pre>

<p>If you need to detect success or failture of a request, use the returned promise:</p>

<pre class="prettyprint linenums">
require(['havok/store/Throttle', 'dojo/store/JsonRest'], function(storeManager, JsonRest){
    var store = new Throttle(new JsonRest({target: 'http://myserver.com'}), 300, 1000);

    store.query({name: 'Bob}).then(
        function(data){
            //request succeeded. Do something with data
        },
        function(err){
            //ttl expired. Request dropped. Do something with err
        }
    );
}</pre>
